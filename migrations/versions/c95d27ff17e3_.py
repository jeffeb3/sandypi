"""empty message

Revision ID: c95d27ff17e3
Revises: fa19d6c5580b
Create Date: 2020-10-17 22:34:40.374452

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector
from sqlalchemy import orm

try:
    from server.database.models import Playlists
except:
    pass


# revision identifiers, used by Alembic.
revision = 'c95d27ff17e3'
down_revision = 'fa19d6c5580b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('playlists', schema=None) as batch_op:
        conn = op.get_bind()
        res = conn.execute("select id, elements from playlists")
        results = res.fetchall()
        inspector = Inspector.from_engine(conn)
        tables = inspector.get_table_names()
        for i in results:
            table_name = "_playlist_{}".format(i[0])
            if table_name not in tables:
                table = op.create_table(table_name,
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('element_type', sa.String(10), nullable=False),
                    sa.Column('drawing_id', sa.Integer(), nullable=True),
                    sa.Column('element_options', sa.String(1000), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    keep_existing= True
                )
                if type(i[1]) is str:
                    elsplit = i[1].split(", ")
                    els = []
                    for e in elsplit:
                        els.append({"drawing_id":e})
                    if len(els)>1:
                        op.bulk_insert(table, els)

        batch_op.drop_column('elements')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('playlists', schema=None) as batch_op:
        batch_op.add_column(sa.Column('elements', sa.VARCHAR(length=1000), nullable=True))
        conn = op.get_bind()
        res = conn.execute("select id from playlists")
        results = res.fetchall()
        bind = op.get_bind()
        session = orm.Session(bind=bind)
        for r in results:
            table_name = "_playlist_{}".format(r[0])
            continue
            inspector = Inspector.from_engine(conn)
            tables = inspector.get_table_names()
            if table_name in tables:
                els = conn.execute("select drawing_id from {}".format(table_name))
                val = ""
                for e in els:
                    val += "{}, ".format(e[0])
                
                pl = session.query(Playlists).get(r[0])
                pl.elements = val
                op.drop_table(table_name)
        session.commit()
            
                

    # ### end Alembic commands ###
